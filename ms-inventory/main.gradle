allprojects {
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'

    compileJava.dependsOn validateStructure

    java {
        sourceCompatibility = JavaVersion.VERSION_17
    }

    test {
        useJUnitPlatform()
    }

    dependencies {
        implementation 'io.projectreactor:reactor-core:3.6.8'

        testImplementation 'io.projectreactor.tools:blockhound-junit-platform:1.0.10.RELEASE'
        testImplementation 'io.projectreactor:reactor-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    }

    tasks.withType(Test).configureEach {
        if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_13)) {
            jvmArgs += ["-XX:+AllowRedefinitionToAddDeleteMethods"]
        }
    }

    jacocoTestReport {
        dependsOn test
        if (tasks.findByName("pitest") != null) {
            dependsOn tasks.named("pitest")
        }

        reports {
            xml.required = true
            xml.outputLocation = layout.buildDirectory.file("reports/jacoco.xml")
            csv.required = false
            html.outputLocation = layout.buildDirectory.dir("reports/jacocoHtml")
        }
    }

    tasks.named("test") {
        finalizedBy(tasks.named("jacocoTestReport"))
    }
}

jacoco {
    toolVersion = "${jacocoVersion}"
    reportsDirectory.set(layout.buildDirectory.dir("reports"))
}

tasks.register('jacocoMergedReport', JacocoReport) {
    dependsOn(subprojects.collect { it.tasks.matching { t -> t.name == "test" } })
    dependsOn(subprojects.collect { it.tasks.matching { t -> t.name == "jacocoTestReport" } })

    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')

    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs = ['-Amapstruct.suppressGeneratorTimestamp=true']
}
